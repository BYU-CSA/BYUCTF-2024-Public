start = [
    True, False, True, True, True, True, False, False, True, False, True, False, True, False, True, True, True, False, True, False, False, False, True, True, True, True, False, True, False, True, True, True, True, False, True, False, False, True, True, False, False, False, False, False, True, False, True, True, True, True, True, False, False, False, True, False, True, True, False, False, True, True, False, False, True, True, True, False, False, True, False, False, False, True, True, True, True, True, True, True, True, False, True, True, False, True, True, True, False, False, True, False, True, True, True, False, True, False, True, False, False, False, False, True, True, False, False, True, True, False, True, False, True, True, False, False, True, True, False, True, False, True, True, False, True, False, False, False, True, True, True, True, True, False, False, False, False, True, True, True, False, False, True, False, False, True, False, True, True, True, False, True, False, False, True, False, True, True, True, True, False, True, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, True, False, True, False, False, True, True, True, True, False, True, True, True, True, True, False, True, True, True, True, False, False, True, True, False, False, True, True, True, True, True, False, True, True, True, False, True, False, True, False, True, True, False, False, False, True, True, False, True, True, False, True, False, False, True, True, False, True, True, True, True, True, True, False, False, True, False, False, False, True, True, True, True, True, False, True, True, False, False, True, True, False, False, True, False, True, True, True, True, False, True, True, True, False, True, True, True, True, True, True, True, True, False, False, True, False, True, False, True, False, False, True, True, False, True, True, True, False, True, True, False, True, False, True, True, False, True, False, False, True, True, False, True, True, True, False, False, False, True, True, True, False, True, True, True, True, False, True, False, False, False, True, True, True, True, False, True, False, True, True, False, False, False, True, True, False, True, False, True, False, True, False, False, True, True, False, False, False, False, False, False, False, False, True, False, False, True, False, False, True, True, True, True, False, False, False, True, True, False, False, False, True, True, False, False, True, True, False, True, True, True, True, False, True, False, True, False, True, True, False, False, True, True, True, True, True, False, True, True, True, True, True, True, False, True, False, False, True, True, False, False, True, True, True, True, True, False, False, False, False, False, False, False, True, True, False, True, False, False, True, True, False, False, True, False, True, True, True, False, True, True, False, False, True, False, True, False, False, True, True, False, True, True, True, True, True, True, True, False, True, False, False, True, False, True, False, False, False, True, True, True, True, True
][::-1]

pairs = [
    (180, 252), (174, 213), (110, 395), (38, 364), (255, 171), (399, 301), (93, 194), (262, 105), (169, 18), (283, 433), (346, 181), (247, 151), (408, 67), (360, 333), (57, 418), (290, 322), (463, 219), (389, 467), (317, 420), (65, 116), (162, 31), (327, 449), (158, 130), (279, 226), (79, 404), (321, 442), (19, 357), (60, 127), (41, 296), (293, 319), (244, 133), (195, 387), (220, 62), (250, 77), (473, 288), (234, 134), (325, 385), (138, 266), (254, 76), (330, 201), (435, 417), (400, 86), (431, 30), (141, 304), (456, 114), (89, 106), (12, 432), (265, 248), (388, 446), (328, 356), (308, 27), (95, 119), (63, 359), (90, 44), (245, 362), (88, 368), (58, 394), (185, 375), (48, 354), (49, 179), (347, 374), (348, 157), (205, 183), (415, 100), (103, 107), (97, 33), (474, 284), (261, 369), (273, 477), (314, 320), (297, 164), (451, 3), (460, 332), (224, 47), (462, 351), (142, 115), (140, 315), (312, 246), (54, 264), (136, 338), (468, 39), (324, 339), (380, 84), (197, 379), (102, 427), (472, 200), (104, 147), (251, 278), (295, 228), (452, 358), (202, 422), (406, 361), (281, 232), (148, 267), (334, 371), (193, 0), (457, 131), (208, 225), (407, 215), (298, 176), (132, 443), (440, 258), (35, 111), (101, 37), (256, 426), (203, 274), (25, 206), (61, 231), (291, 421), (192, 428), (137, 355), (454, 241), (15, 455), (294, 350), (373, 352), (285, 187), (412, 282), (124, 99), (275, 311), (123, 28), (121, 168), (91, 188), (218, 397), (243, 398), (270, 117), (475, 211), (113, 42), (163, 17), (68, 146), (199, 112), (160, 51), (391, 377), (217, 337), (126, 403), (268, 409), (207, 74), (343, 139), (24, 378), (383, 340), (186, 466), (87, 92), (313, 410), (230, 402), (96, 453), (21, 94), (85, 154), (269, 307), (419, 260), (56, 271), (50, 214), (405, 287), (365, 376), (366, 263), (55, 204), (53, 120), (461, 471), (237, 249), (1, 233), (161, 216), (302, 437), (242, 450), (69, 7), (335, 80), (277, 396), (16, 66), (2, 318), (83, 331), (45, 36), (223, 310), (309, 78), (6, 272), (52, 173), (191, 286), (23, 178), (370, 342), (189, 4), (436, 445), (227, 329), (414, 82), (152, 384), (165, 240), (150, 81), (46, 253), (401, 413), (170, 276), (259, 363), (382, 316), (323, 175), (73, 159), (108, 109), (306, 236), (238, 13), (459, 196), (75, 305), (448, 239), (257, 425), (229, 476), (172, 210), (479, 149), (11, 29), (129, 381), (5, 326), (182, 43), (128, 167), (280, 434), (14, 424), (292, 118), (145, 212), (393, 198), (9, 300), (177, 155), (447, 441), (26, 70), (190, 289), (40, 156), (390, 144), (98, 465), (458, 372), (303, 32), (64, 135), (166, 72), (438, 478), (299, 336), (153, 464), (10, 386), (444, 341), (34, 423), (221, 439), (349, 367), (59, 469), (470, 392), (209, 184), (222, 122), (416, 344), (8, 235), (345, 71), (430, 353), (20, 125), (22, 411), (429, 143)
]

bits = []
for b in start:
    if b:
        bits.append('1')
    else:
        bits.append('0')
flag_bits = ['?']*len(start)

#print(bits)
#print(len(bits))


for p in pairs:
    x = p[0]
    y = p[1]

    flag_bits[x] = bits[y]
    flag_bits[y] = bits[x]

b = ''.join(flag_bits)

print(''.join([chr(int(b[x:x+8],2)) for x in range(0, len(b), 8)]))